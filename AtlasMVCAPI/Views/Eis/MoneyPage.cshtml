@using System.Data;
@model DataSet
@{
    ViewBag.Title = "ItemPricePivotSearch";
    Layout = "~/Views/Shared/_LayoutPageEIS.cshtml";
}
@{
    string start = ViewBag.startDate;
    string end = ViewBag.endDate;
}

<!-- Main content -->
<div class="invoice p-3 mb-3">
    <!-- from, to 값을 넘겨야한다 "MoneyPage", "EIS", FormMethod.Post -->
    @using (Html.BeginForm("MoneyPage", "Eis", FormMethod.Post, new { @id = "formMoney", @name = "formMoney" }))
    {
        <div class="row">
            <div class="col-4">
                <div class="input-group">
                    <label></label>
                    <div class="input-group-prepend">
                        <span class="input-group-text">
                            <i class="far fa-calendar-alt"></i>
                        </span>
                    </div>

                    <input type="text" class="form-control float-right" id="reservation">
                    <input type="hidden" name="startDate" id="startDate" />
                    <input type="hidden" name="endDate" id="endDate" />

                </div>
            </div>
            <div class="col-4">
                <button type="submit" id="saveBtn" class="btn btn-primary" onclick="search_fn()">조회</button>
            </div>
        </div>
    }
    <br />
    <!-- title row -->
    <div class="row">
        <div class="col-12">
            <!-- LINE CHART -->
            <div class="card card-info">
                <div class="card-header">
                    <h3 class="card-title">매출현황</h3>

                    <div class="card-tools">
                        <button type="button" class="btn btn-tool" data-card-widget="collapse">
                            <i class="fas fa-minus"></i>
                        </button>
                        <button type="button" class="btn btn-tool" data-card-widget="remove">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="chart">
                        <canvas id="lineChart" style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%;"></canvas>
                    </div>
                </div>
                <!-- /.card-body -->
            </div>
        </div>
        <div class="col-12">
            <!-- LINE CHART -->
            <div class="card card-info">
                <div class="card-header">
                    <h3 class="card-title">매입현황</h3>

                    <div class="card-tools">
                        <button type="button" class="btn btn-tool" data-card-widget="collapse">
                            <i class="fas fa-minus"></i>
                        </button>
                        <button type="button" class="btn btn-tool" data-card-widget="remove">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="chart">
                        <canvas id="lineChart" style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%;"></canvas>
                    </div>
                </div>
                <!-- /.card-body -->
            </div>
        </div>
    </div>
</div>
@{

    string labels = ViewBag.Labels;

    string label1 = ViewBag.Label1;
    string data1 = ViewBag.Data1;

    string label2 = ViewBag.Label2;
    string data2 = ViewBag.Data2;

    string label3 = ViewBag.Label3;
    string data3 = ViewBag.Data3;
}
@section Scripts
{
    <!-- ChartJS -->
    <script src="/plugins/chart.js/Chart.min.js"></script>
    <script>
        $(function () {
            /* ChartJS
             * -------
             * Here we will create a few charts using ChartJS
             */

            //--------------
            //- AREA CHART -
            //--------------

            // Get context with jQuery - using jQuery's .get() method.
            var areaChartCanvas = $('#areaChart').get(0).getContext('2d')

            var temp = "@labels"; //"January,February,March,April,May,June,July"
            var arrTemp = temp.split(','); //['January', 'February', 'March', 'April', 'May', 'June', 'July']

            var areaChartData = {
                labels: arrTemp,
                datasets: [
                    {
                        label: '@label1',
                        backgroundColor: 'rgba(60,141,188,0.9)',
                        borderColor: 'rgba(60,141,188,0.8)',
                        pointRadius: false,
                        pointColor: '#3b8bba',
                        pointStrokeColor: 'rgba(60,141,188,1)',
                        pointHighlightFill: '#fff',
                        pointHighlightStroke: 'rgba(60,141,188,1)',
                        data: @data1
                    },
                    {
                        label: '@label2',
                        backgroundColor: 'rgba(210, 214, 222, 1)',
                        borderColor: 'rgba(210, 214, 222, 1)',
                        pointRadius: false,
                        pointColor: 'rgba(210, 214, 222, 1)',
                        pointStrokeColor: '#c1c7d1',
                        pointHighlightFill: '#fff',
                        pointHighlightStroke: 'rgba(220,220,220,1)',
                        data: @data2
                    },
                    {
                        label: '@label3',
                        backgroundColor: 'rgba(210, 105, 84, 1)',
                        borderColor: 'rgba(210, 105, 84, 1)',
                        pointRadius: false,
                        pointColor: 'rgba(210, 105, 84, 1)',
                        pointStrokeColor: '#c1c7d1',
                        pointHighlightFill: '#fff',
                        pointHighlightStroke: 'rgba(220,220,220,1)',
                        data: @data3
                    },
                ]
            }

            var areaChartOptions = {
                maintainAspectRatio: false,
                responsive: true,
                legend: {
                    display: false
                },
                scales: {
                    xAxes: [{
                        gridLines: {
                            display: false,
                        }
                    }],
                    yAxes: [{
                        gridLines: {
                            display: false,
                        }
                    }]
                }
            }

            // This will get the first returned node in the jQuery collection.
            new Chart(areaChartCanvas, {
                type: 'line',
                data: areaChartData,
                options: areaChartOptions
            })

            //-------------
            //- LINE CHART -
            //--------------
            var lineChartCanvas = $('#lineChart').get(0).getContext('2d')
            var lineChartOptions = $.extend(true, {}, areaChartOptions)
            var lineChartData = $.extend(true, {}, areaChartData)
            lineChartData.datasets[0].fill = false;
            lineChartData.datasets[1].fill = false;
            lineChartData.datasets[2].fill = false;
            lineChartOptions.datasetFill = false

            var lineChart = new Chart(lineChartCanvas, {
                type: 'line',
                data: lineChartData,
                options: lineChartOptions
            })

            //-------------
            //- DONUT CHART -
            //-------------
            // Get context with jQuery - using jQuery's .get() method.
            var donutChartCanvas = $('#donutChart').get(0).getContext('2d')
            var donutData = {
                labels: [
                    'Chrome',
                    'IE',
                    'FireFox',
                    'Safari',
                    'Opera',
                    'Navigator',
                ],
                datasets: [
                    {
                        data: [700, 500, 400, 600, 300, 100],
                        backgroundColor: ['#f56954', '#00a65a', '#f39c12', '#00c0ef', '#3c8dbc', '#d2d6de'],
                    }
                ]
            }
            var donutOptions = {
                maintainAspectRatio: false,
                responsive: true,
            }
            //Create pie or douhnut chart
            // You can switch between pie and douhnut using the method below.
            new Chart(donutChartCanvas, {
                type: 'doughnut',
                data: donutData,
                options: donutOptions
            })

            //-------------
            //- PIE CHART -
            //-------------
            // Get context with jQuery - using jQuery's .get() method.
            var pieChartCanvas = $('#pieChart').get(0).getContext('2d')
            var pieData = donutData;
            var pieOptions = {
                maintainAspectRatio: false,
                responsive: true,
            }
            //Create pie or douhnut chart
            // You can switch between pie and douhnut using the method below.
            new Chart(pieChartCanvas, {
                type: 'pie',
                data: pieData,
                options: pieOptions
            })

            //-------------
            //- BAR CHART -
            //-------------
            var barChartCanvas = $('#barChart').get(0).getContext('2d')
            var barChartData = $.extend(true, {}, areaChartData)
            var temp0 = areaChartData.datasets[0]
            var temp1 = areaChartData.datasets[1]
            barChartData.datasets[0] = temp1
            barChartData.datasets[1] = temp0

            var barChartOptions = {
                responsive: true,
                maintainAspectRatio: false,
                datasetFill: false
            }

            new Chart(barChartCanvas, {
                type: 'bar',
                data: barChartData,
                options: barChartOptions
            })

            //---------------------
            //- STACKED BAR CHART -
            //---------------------
            var stackedBarChartCanvas = $('#stackedBarChart').get(0).getContext('2d')
            var stackedBarChartData = $.extend(true, {}, barChartData)

            var stackedBarChartOptions = {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    xAxes: [{
                        stacked: true,
                    }],
                    yAxes: [{
                        stacked: true
                    }]
                }
            }

            new Chart(stackedBarChartCanvas, {
                type: 'bar',
                data: stackedBarChartData,
                options: stackedBarChartOptions
            })




        })</script>



    <!-- 달력 -->

    <script src="/plugins/moment/moment.min.js"></script>
    <script src="/plugins/inputmask/jquery.inputmask.min.js"></script>

    <script src="/plugins/daterangepicker/daterangepicker.js"></script>

    <script src="/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>

    <script src="/plugins/bootstrap-switch/js/bootstrap-switch.min.js"></script>

    <script src="/dist/js/adminlte.min.js?v=3.2.0"></script>

    @*<script src="/dist/js/demo.js"></script>*@

    <script type="text/javascript">
        jQuery.noConflict();
          var startDate;
          var endDate;
        $(document).ready(function () {
            $('#reservation').daterangepicker(
                {
                    locale: {
                        format: 'YYYY-MM-DD'
                    },


                    @*setStartDate:@ViewBag.startDate,
                    setEndDate:@ViewBag.endDaendDate,*@
                    //startDate: moment().subtract('days', 29),
                    //endDate: moment(),
                    //startDate: a,
                    //endDate: b,
                    startDate: '@start',
                    endDate: '@end',
                    showDropdowns: true,
                    showWeekNumbers: true,
                    timePicker: false,
                    timePickerIncrement: 1,
                    timePicker12Hour: true,
                    opens: 'left',
                    format: 'YYYY-MM-DD',
                    separator: ' to ',
                    //timePicker: true,
                    //timePicker24Hour: true,
                })

                //function (start, end) {
                //    console.log("Callback has been called!");
                //    $('#reservation span').html(start.format('YYYY-MM-DD') + ' - ' + end.format('YYYY-MM-DD'));
                //    startDate = start;
                //    endDate = end;

                //}
                $('#reservation').on('apply.daterangepicker', function (ev, picker) {
                    //Model.startDate = picker.startDate.format('YYYY-MM-DD HH:mm');
                    //   Model.endDate = picker.endDate.format('YYYY-MM-DD HH:mm');
                    // PASS VALUE TO CONTROLLER HERE
                    console.log(picker.startDate.format('YYYY-MM-DD HH:mm'));
                    console.log(picker.endDate.format('YYYY-MM-DD HH:mm'));
                    document.getElementById("startDate").value = picker.startDate.format('YYYY-MM-DD');
                    document.getElementById("endDate").value = picker.endDate.format('YYYY-MM-DD');
                })
            }
        );

            //$('#saveBtn').click(function () {
            //    console.log(startDate.format('YYYY-MM-DD') + ' - ' + endDate.format('YYYY-MM-DD'));
            //    $('#startDate').val(startDate.format('YYYY-MM-DD'));
            //    $('#endDate').val(endDate.format('YYYY-MM-DD'));
            //    $('#form1')[0].submit();
            //});

       // });



        function search_fn() {
            window.location.href = 'Index?startDate=' + document.getElementById("startDate").value + '&endDate=' + document.getElementById("endDate").value + '&productCode=' + document.getElementById("productCode").value + '&op_code=' + document.getElementById("op_code").value + '&childCode=' + document.getElementById("childCode").value;
        }

        //function Search_Fn() {
        //       // console.log(startDate.format('YYYY-MM-DD') + ' - ' + endDate.format('YYYY-MM-DD'));
        //    //startDate = start;
        //    //endDate = end;
        //        document.form1.submit();
        //    }

    </script>


    <script type="text/javascript">
        jQuery.noConflict();
          var startDate;
          var endDate;
        $(document).ready(function () {
            $('#reservation').daterangepicker(
                {
                    locale: {
                        format: 'YYYY-MM-DD'
                    },


                    @*setStartDate:@ViewBag.startDate,
                    setEndDate:@ViewBag.endDaendDate,*@
                    //startDate: moment().subtract('days', 29),
                    //endDate: moment(),
                    //startDate: a,
                    //endDate: b,
                    startDate: '@start',
                    endDate: '@end',
                    showDropdowns: true,
                    showWeekNumbers: true,
                    timePicker: false,
                    timePickerIncrement: 1,
                    timePicker12Hour: true,
                    opens: 'left',
                    format: 'YYYY-MM-DD',
                    separator: ' to ',
                    //timePicker: true,
                    //timePicker24Hour: true,
                })

                //function (start, end) {
                //    console.log("Callback has been called!");
                //    $('#reservation span').html(start.format('YYYY-MM-DD') + ' - ' + end.format('YYYY-MM-DD'));
                //    startDate = start;
                //    endDate = end;

                //}
                $('#reservation').on('apply.daterangepicker', function (ev, picker) {
                    //Model.startDate = picker.startDate.format('YYYY-MM-DD HH:mm');
                    //   Model.endDate = picker.endDate.format('YYYY-MM-DD HH:mm');
                    // PASS VALUE TO CONTROLLER HERE
                    console.log(picker.startDate.format('YYYY-MM-DD HH:mm'));
                    console.log(picker.endDate.format('YYYY-MM-DD HH:mm'));
                    document.getElementById("startDate").value = picker.startDate.format('YYYY-MM-DD');
                    document.getElementById("endDate").value = picker.endDate.format('YYYY-MM-DD');
                })
            }
        );
    </script>
    <script>
        $(function () {
            //Initialize Select2 Elements
            $('.select2').select2()

            //Initialize Select2 Elements
            $('.select2bs4').select2({
                theme: 'bootstrap4'
            })

            //Datemask dd/mm/yyyy
            $('#datemask').inputmask('dd/mm/yyyy', { 'placeholder': 'dd/mm/yyyy' })
            //Datemask2 mm/dd/yyyy
            $('#datemask2').inputmask('mm/dd/yyyy', { 'placeholder': 'mm/dd/yyyy' })
            //Money Euro
            $('[data-mask]').inputmask()

            //Date picker
            $('#reservationdate').datetimepicker({
                format: 'L'
            });

            //Date and time picker
            $('#reservationdatetime').datetimepicker({ icons: { time: 'far fa-clock' } });

            //Date range picker
            $('#reservation').daterangepicker()
            //Date range picker with time picker
            $('#reservationtime').daterangepicker({
                timePicker: true,
                timePickerIncrement: 30,
                locale: {
                    format: 'MM/DD/YYYY hh:mm A'
                }
            })
            //Date range as a button
            $('#daterange-btn').daterangepicker(
                {
                    ranges: {
                        'Today': [moment(), moment()],
                        'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                        'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                        'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                        'This Month': [moment().startOf('month'), moment().endOf('month')],
                        'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                    },
                    startDate: moment().subtract(29, 'days'),
                    endDate: moment()
                },
                function (start, end) {
                    $('#reportrange span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'))
                }
            )

            //Timepicker
            $('#timepicker').datetimepicker({
                format: 'LT'
            })


            $("input[data-bootstrap-switch]").each(function () {
                $(this).bootstrapSwitch('state', $(this).prop('checked'));
            })

        })

        // Get the template HTML and remove it from the doumenthe template HTML and remove it from the doument
        var previewNode = document.querySelector("#template")
        previewNode.id = ""
        var previewTemplate = previewNode.parentNode.innerHTML
        previewNode.parentNode.removeChild(previewNode)

        // Setup the buttons for all transfers
        // The "add files" button doesn't need to be setup because the config
        // `clickable` has already been specified.
        document.querySelector("#actions .start").onclick = function () {
            myDropzone.enqueueFiles(myDropzone.getFilesWithStatus(Dropzone.ADDED))
        }
        document.querySelector("#actions .cancel").onclick = function () {
            myDropzone.removeAllFiles(true)
        }
        // DropzoneJS Demo Code End
    </script>
}