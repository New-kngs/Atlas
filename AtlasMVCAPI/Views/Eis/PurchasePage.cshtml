@using System.Data;
@model AtlasMVCAPI.Models.MoneyViewModel
@{
    ViewBag.Title = "ItemPricePivotSearch";
    Layout = "~/Views/Shared/_LayoutPageEIS.cshtml";
}
@{
    string start = ViewBag.startDate;
    string end = ViewBag.endDate;
    DataTable table = ViewData["Table"] as DataTable; // 매출 Pivot Table
}

<!-- Main content -->
<div class="invoice p-3 mb-3">
    <!-- from, to 값을 넘겨야한다 "MoneyPage", "EIS", FormMethod.Post -->
    @using (Html.BeginForm())
    {
        <div class="row">
            <div class="col-4">
                <div class="input-group">
                    <label></label>
                    <div class="input-group-prepend">
                        <span class="input-group-text">
                            <i class="far fa-calendar-alt"></i>
                        </span>
                    </div>

                    <input type="text" class="form-control float-right" id="reservation">
                    <input type="hidden" name="startDate" id="startDate" />
                    <input type="hidden" name="endDate" id="endDate" />
                    <button type="submit" class="btn btn-primary" onclick="search_fn()">조회</button>

                </div>
            </div>
        </div>
    }
    <br />
    <!-- title row -->
    <div class="row">
        <div class="col-md-12">
            <canvas hidden id="areaChart" style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%;"></canvas>
            <div class="col-12">
                <!-- LINE CHART -->
                <div class="card card-info">
                    <div class="card-header">
                        <h3 class="card-title">매입현황</h3>
                        <div class="card-tools">
                            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                <i class="fas fa-minus"></i>
                            </button>
                            <button type="button" class="btn btn-tool" data-card-widget="remove">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <h3>매입 제품 Top 6</h3>
                        <div class="chart">
                            <canvas id="barChart" style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%;"></canvas>
                        </div>
                        <h3>매입 전체 목록</h3>
                        <div id="table" style="overflow: auto;">
                            <table class="table" cellpadding="0" cellspacing="0">
                                <thead>
                                    <tr>
                                        <!-- <th scope="col">#</th> -->
                                        @foreach (DataColumn col in table.Columns)
                                        {
                                            if (col.ColumnName != "ItemName")
                                            {
                                                <th scope="col" style="text-align:center;">@col.ColumnName.Substring(5, 5)</th>
                                            }
                                            else
                                            {
                                                <th scope="col" style="text-align:center;">@col.ColumnName</th>
                                            }
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (DataRow row in table.Rows)
                                    {
                                        <tr>
                                            @for (int i = 0; i < table.Columns.Count; i++)
                                            {
                                                <td style="text-align:right;">@row[i]</td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>

                </div>
            </div>

        </div>
    </div>
</div>
@{
    // 기간조회
    string inputDates = Model.M_Date; // "08-12,08-13,08-15"
                                      // ['January', 'February', 'March', 'April', 'May', 'June', 'July']

    List<string> ItemSaleNames = Model.ItemSalesName;
    List<string> ItemSalePrice = Model.ItemSalePrice;
    List<string> ItemPurchaseName = Model.ItemPurchaseName;
    List<string> ItemPurchasePrice = Model.ItemPurchasePrice;
}
@section Scripts
{
    <!-- ChartJS -->
    <script src="/plugins/chart.js/Chart.min.js"></script>

    <!-- 달력 -->
    <script src="/plugins/select2/js/select2.full.min.js"></script>

    <script src="/plugins/bootstrap4-duallistbox/jquery.bootstrap-duallistbox.min.js"></script>

    <script src="/plugins/moment/moment.min.js"></script>
    <script src="/plugins/inputmask/jquery.inputmask.min.js"></script>

    <script src="/plugins/daterangepicker/daterangepicker.js"></script>

    <script src="/dist/js/adminlte.min.js?v=3.2.0"></script>

    <!-- ChartJS -->
    <script src="/plugins/chart.js/Chart.min.js"></script>




    <script>
        $(function () {
            // Chart
            /* ChartJS
             * -------
             * Here we will create a few charts using ChartJS
             */

            //--------------
            //- AREA CHART (매출) -
            //--------------

            // Get context with jQuery - using jQuery's .get() method.
            var areaChartCanvas = $('#areaChart').get(0).getContext('2d')
            var temp = "@inputDates"; //"January,February,March,April,May,June,July"
            var arrTemp = temp.split(','); //['January', 'February', 'March', 'April', 'May', 'June', 'July']

            var areaChartData = {
                // labels: [inputDates],
                // labels: ['08-08', '08-09', '08-10', '08-11', '08-12', '08-13', '08-14'],
                labels: arrTemp,
                datasets: [
                    @*@for(int i=0; i<ItemSaleNames.Count)*@
                    {
                        label: '@ItemSaleNames[0]',
                        backgroundColor: 'rgba(255,167,167,0.9)',
                        borderColor: 'rgba(255,167,167,0.8)',
                        pointRadius: false,
                        pointColor: '#3b8bba',
                        pointStrokeColor: 'rgba(60,141,188,1)',
                        pointHighlightFill: '#fff',
                        pointHighlightStroke: 'rgba(60,141,188,1)',
                        data: @ItemSalePrice[0]
                    },
                    {
                        label               : '@ItemSaleNames[1]',
                        backgroundColor: 'rgba(255, 193, 158, 1)',
                        borderColor: 'rgba(255, 193, 158, 0.8)',
                        pointRadius         : false,
                        pointColor          : '#fff',
                        pointStrokeColor:     '#fff',
                        pointHighlightFill  : '#fff',
                        pointHighlightStroke: '#fff',
                        data                : @ItemSalePrice[1]
                    },
                    {
                        label               : '@ItemSaleNames[2]',
                        backgroundColor: 'rgba(255, 224, 140, 1)',
                        borderColor: 'rgba(255, 224, 140, 0.8)',
                        pointRadius         : false,
                        pointColor          : '#fff',
                        pointStrokeColor:     '#fff',
                        pointHighlightFill  : '#fff',
                        pointHighlightStroke: '#fff',
                        data                : @ItemSalePrice[2]
                    },
                    {
                        label               : '@ItemSaleNames[3]',
                        backgroundColor: 'rgba(250, 237, 125, 1)',
                        borderColor: 'rgba(250, 237, 125, 0.8)',
                        pointRadius         : false,
                        pointColor          : '#fff',
                        pointStrokeColor:     '#fff',
                        pointHighlightFill  : '#fff',
                        pointHighlightStroke: '#fff',
                        data                : @ItemSalePrice[3]
                    },
                    {
                        label               : '@ItemSaleNames[4]',
                        backgroundColor: 'rgba(206, 242, 121, 1)',
                        borderColor: 'rgba(206, 242, 121, 0.8)',
                        pointRadius         : false,
                        pointColor          : '#fff',
                        pointStrokeColor:     '#fff',
                        pointHighlightFill  : '#fff',
                        pointHighlightStroke: '#fff',
                        data                : @ItemSalePrice[4]
                    },
                    {
                        label               : '@ItemSaleNames[5]',
                        backgroundColor: 'rgba(183, 240, 177, 1)',
                        borderColor: 'rgba(183, 240, 177, 0.8)',
                        pointRadius         : false,
                        pointColor          : '#fff',
                        pointStrokeColor:     '#fff',
                        pointHighlightFill  : '#fff',
                        pointHighlightStroke: '#fff',
                        data                : @ItemSalePrice[5]
                    },
                ]
            }

            var areaChartOptions = {
                maintainAspectRatio: false,
                responsive: true,
                legend: {
                    display: true
                },
                scales: {
                    xAxes: [{
                        gridLines: {
                            display: false,
                        }
                    }],
                    yAxes: [{
                        gridLines: {
                            display: false,
                        }
                    }]
                }
            }

            // This will get the first returned node in the jQuery collection.
            new Chart(areaChartCanvas, {
                type: 'line',
                data: areaChartData,
                options: areaChartOptions
            })

            //-------------
            //- BAR CHART -
            //-------------
            var barChartCanvas = $('#barChart').get(0).getContext('2d')
            var barChartData = $.extend(true, {}, areaChartData)
            var temp0 = areaChartData.datasets[0]
            var temp1 = areaChartData.datasets[1]
            barChartData.datasets[0] = temp1
            barChartData.datasets[1] = temp0

            var barChartOptions = {
                responsive: true,
                maintainAspectRatio: false,
                datasetFill: false
            }

            new Chart(barChartCanvas, {
                type: 'bar',
                data: barChartData,
                options: barChartOptions
            })

            //-------------
            //- LINE CHART -
            //--------------
            var lineChartCanvas = $('#lineChart').get(0).getContext('2d')
            var lineChartOptions = $.extend(true, {}, areaChartOptions)
            var lineChartData = $.extend(true, {}, areaChartData)
            lineChartData.datasets[0].fill = false;
            lineChartData.datasets[1].fill = false;
            lineChartOptions.datasetFill = false

            var lineChart = new Chart(lineChartCanvas, {
                type: 'line',
                data: lineChartData,
                options: lineChartOptions
            })

        })

            //Date range picker
            $('#reservation').daterangepicker(
                {
                    locale: {
                        format: 'YYYY-MM-DD'
                    },


                    @*setStartDate:@ViewBag.startDate,
                    setEndDate:@ViewBag.endDaendDate,*@
                    //startDate: moment().subtract('days', 29),
                    //endDate: moment(),
                    //startDate: a,
                    //endDate: b,
                    startDate: '@start',
                    endDate: '@end',
                    showDropdowns: true,
                    showWeekNumbers: true,
                    timePicker: false,
                    timePickerIncrement: 1,
                    timePicker12Hour: true,
                    opens: 'left',
                    format: 'YYYY-MM-DD',
                    separator: ' to ',
                    //timePicker: true,
                    //timePicker24Hour: true,
                }
            )
            //Date range picker with time picker
            $('#reservation').on('apply.daterangepicker', function (ev, picker) {
                //Model.startDate = picker.startDate.format('YYYY-MM-DD HH:mm');
                //   Model.endDate = picker.endDate.format('YYYY-MM-DD HH:mm');
                // PASS VALUE TO CONTROLLER HERE
                console.log(picker.startDate.format('YYYY-MM-DD HH:mm'));
                console.log(picker.endDate.format('YYYY-MM-DD HH:mm'));
                document.getElementById("startDate").value = picker.startDate.format('YYYY-MM-DD');
                document.getElementById("endDate").value = picker.endDate.format('YYYY-MM-DD');
            })


        function search_fn() {
            window.location.href = 'Index?startDate=' + document.getElementById("startDate").value + '&endDate=' + document.getElementById("endDate").value;
        }

    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            //debugger;
            //alert($('#dataObjCol').val());
            var dataObjCol = JSON.parse($('#dataObjCol').val());
            var dataObjData = JSON.parse($('#dataObjData').val());



            // Datatable settings.
            $('#TableId').DataTable(
                {

                    "data": dataObjData,
                    "columns": dataObjCol,
                    //    { "data": "ORDER_DATE" },
                    //    { "data": "WORK_ORDER_ID" },
                    //    { "data": "PRODUCT_CODE" },
                    //    { "data": "PRODUCT_NAME" },
                    //    { "data": "ORDER_QTY" },
                    //    { "data": "PRODUCT_QTY" },
                    //    { "data": "DEFECT_QTY" },
                    //    { "data": "QUALITY_RATE" },
                    //    { "data": "DEFECT_RATE" },
                    //    { "data": "WORK_CLOSE_TIME" } //데이터가 이렇게 넘어오게 하면 되는 거잖아? 근데 지금은 타이틀도 같이 넘어오는 상태고..그 타이틀은 보여주는 컬럼인가?

                    //],
                    "bPaginate": false,
                    "bFilter": false,
                    "bInfo": false,
                    "autoWidth": false,
                    "bSort": false,
                    "columnDefs": [
                        {
                            "width": "28px",
                            "targets": "0",
                            "className": "text-right"
                        },
                        {
                            "width": "2px",
                            "targets": "1",
                            "className": "text-right"
                        }
                    ]
                });
        });
    </script>
}
