@using System.Data;
@model AtlasMVCAPI.Models.FailRateModel
@{
    ViewBag.Title = "ItemPricePivotSearch";
    Layout = "~/Views/Shared/_LayoutPageEIS.cshtml";
}
@{
//string strLabels = ViewData["labels"] as string;
//List<string> listData = Model.ToList();
}
<!-- Main content -->
<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <form action="/Eis/FailRate" method="post">
                    <!-- class="form-control" -->
                    <input type="date" max="@DateTime.Now.ToString("yyyy-MM-dd")" name="searchDate"><button type="submit" class="btn btn-primary">조회</button>
                </form>
            </div>
            <br />
            <!-- /.col (LEFT) -->
            <div class="col-md-12">

                <!-- /.card -->
                <canvas hidden id="lineChart" style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%;"></canvas>
                <canvas hidden id="areaChart" style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%;"></canvas>
                <canvas hidden id="barChart" style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%;"></canvas>

                <!-- /.card -->
                <!-- STACKED BAR CHART -->
                <div class="card card-success">
                    <div class="card-header">
                        <h3 class="card-title">불량현황</h3>

                        <div class="card-tools">
                            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                <i class="fas fa-minus"></i>
                            </button>
                            <button type="button" class="btn btn-tool" data-card-widget="remove">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <h3>일일 생산 제품별 불량 현황</h3>
                        <div class="chart">
                            <canvas id="stackedBarChart" style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%;"></canvas>
                        </div>
                    </div>
                    <!-- /.card-body -->
                </div>
                <!-- /.card -->

            </div>
            <!-- /.col (RIGHT) -->
        </div>
        <!-- /.row -->
    </div><!-- /.container-fluid -->
</section>
<!-- /.content -->
<!-- jQuery -->
<script src="../../plugins/jquery/jquery.min.js"></script>
<!-- Bootstrap 4 -->
<script src="../../plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
<!-- ChartJS -->
<script src="../../plugins/chart.js/Chart.min.js"></script>
<!-- AdminLTE App -->
<script src="../../dist/js/adminlte.min.js"></script>
<!-- Page specific script -->
<script>
    $(function () {
        /* ChartJS
         * -------
         * Here we will create a few charts using ChartJS
         */

        //--------------
        //- AREA CHART -
        //--------------

        // Get context with jQuery - using jQuery's .get() method.
        var areaChartCanvas = $('#areaChart').get(0).getContext('2d')
        var temp = "@Model.ItemNames.ToString()" // January,February,March,April,May,June,July"
            var arrTemp = temp.split(',')

        var areaChartData = {
            labels: arrTemp,
            datasets: [

                {
                    label: '작업실수',
                    backgroundColor: 'rgba(255, 167, 167, 1)',
                    borderColor: 'rgba(255, 167, 167, 1)',
                    pointRadius: false,
                    pointColor: 'rgba(255, 167, 167, 1)',
                    pointStrokeColor: '#c1c7d1',
                    pointHighlightFill: '#fff',
                    pointHighlightStroke: 'rgba(220,220,220,1)',
                    data: @Model.OF.ToString()
                },
                {
                    label: '정상',
                    backgroundColor: 'rgba(93,93,93,0.9)',
                    borderColor: 'rgba(93,93,93,0.8)',
                    pointRadius: false,
                    pointColor: '#3b8bba',
                    pointStrokeColor: 'rgba(60,141,188,1)',
                    pointHighlightFill: '#fff',
                    pointHighlightStroke: 'rgba(60,141,188,1)',
                    data: @Model.Complete.ToString()
                },
                {
                    label: '설비고장',
                    backgroundColor: 'rgba(178, 235, 244, 1)',
                    borderColor: 'rgba(178, 235, 244, 1)',
                    pointRadius: false,
                    pointColor: 'rgba(178, 235, 244, 1)',
                    pointStrokeColor: '#c1c7d1',
                    pointHighlightFill: '#fff',
                    pointHighlightStroke: 'rgba(178, 235, 244,1)',
                    data: @Model.EF.ToString()
                },
                {
                    label: '시스템오류',
                    backgroundColor: 'rgba(250, 237, 125, 1)',
                    borderColor: 'rgba(250, 237, 125, 1)',
                    pointRadius: false,
                    pointColor: 'rgba(250, 237, 125, 1)',
                    pointStrokeColor: '#c1c7d1',
                    pointHighlightFill: '#fff',
                    pointHighlightStroke: 'rgba(220,220,220,1)',
                    data: @Model.SF.ToString()
                },
                {
                    label: '자재불량',
                    backgroundColor: 'rgba(206, 242, 121, 1)',
                    borderColor: 'rgba(206, 242, 121, 1)',
                    pointRadius: false,
                    pointColor: 'rgba(206, 242, 121, 1)',
                    pointStrokeColor: '#c1c7d1',
                    pointHighlightFill: '#fff',
                    pointHighlightStroke: 'rgba(220,220,220,1)',
                    data: @Model.IF.ToString()
                },
            ]
        }

        var areaChartOptions = {
            maintainAspectRatio: false,
            responsive: true,
            legend: {
                display: false
            },
            scales: {
                xAxes: [{
                    gridLines: {
                        display: false,
                    }
                }],
                yAxes: [{
                    gridLines: {
                        display: false,
                    }
                }]
            }
        }

        // This will get the first returned node in the jQuery collection.
        new Chart(areaChartCanvas, {
            type: 'line',
            data: areaChartData,
            options: areaChartOptions
        })

        //-------------
        //- LINE CHART -
        //--------------
        var lineChartCanvas = $('#lineChart').get(0).getContext('2d')
        var lineChartOptions = $.extend(true, {}, areaChartOptions)
        var lineChartData = $.extend(true, {}, areaChartData)
        lineChartData.datasets[0].fill = false;
        lineChartData.datasets[1].fill = false;
        lineChartOptions.datasetFill = false

        var lineChart = new Chart(lineChartCanvas, {
            type: 'line',
            data: lineChartData,
            options: lineChartOptions
        })



        //-------------
        //- BAR CHART -
        //-------------
        var barChartCanvas = $('#barChart').get(0).getContext('2d')
        var barChartData = $.extend(true, {}, areaChartData)
        var temp0 = areaChartData.datasets[0]
        var temp1 = areaChartData.datasets[1]
        barChartData.datasets[0] = temp1
        barChartData.datasets[1] = temp0

        var barChartOptions = {
            responsive: true,
            maintainAspectRatio: false,
            datasetFill: false
        }

        new Chart(barChartCanvas, {
            type: 'bar',
            data: barChartData,
            options: barChartOptions
        })

        //---------------------
        //- STACKED BAR CHART -
        //---------------------
        var stackedBarChartCanvas = $('#stackedBarChart').get(0).getContext('2d')
        var stackedBarChartData = $.extend(true, {}, barChartData)

        var stackedBarChartOptions = {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                xAxes: [{
                    stacked: true,
                }],
                yAxes: [{
                    stacked: true
                }]
            }
        }

        new Chart(stackedBarChartCanvas, {
            type: 'bar',
            data: stackedBarChartData,
            options: stackedBarChartOptions
        })
    })
</script>